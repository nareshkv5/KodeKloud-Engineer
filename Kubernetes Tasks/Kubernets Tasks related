--------------------------------------------------------------------------------------------------------------------------------------------------------------
Ansible Basic Playbook 14/Jan/2022
--------------------------------------------------------------------------------------------------------------------------------------------------------------
One of the Nautilus DevOps team members was working on to test an Ansible playbook on jump host. However, he was only able to 
create the inventory, and due to other priorities that came in he has to work on other tasks. Please pick up this task from where he left off 
and complete it. Below are more details about the task:

The inventory file /home/thor/ansible/inventory seems to be having some issues, please fix them. The playbook needs to be run on App Server 3 in Stratos DC, 
so inventory file needs to be updated accordingly.

Create a playbook /home/thor/ansible/playbook.yml and add a task to create an empty file /tmp/file.txt on App Server 3.

Note: Validation will try to run the playbook using command ansible-playbook -i inventory playbook.yml so please make sure the playbook works 
this way without passing any extra arguments.

AS per the commands check the inventory file in the below directory

cd /home/thor/ansible and cat inventory file. 

Modify the inventory file by passing the stapp03 server ip address/username/password.

stapp02 ansible_host=172.16.238.11 ansible_user=steve ansible_ssh_pass=Am3ric@

As per the tas create playbook.yml and adding task.

vi playbook.yml
---
- hosts: stapp03

tasks:

- name: Create the file

file:

path: /tmp/file.txt

state: touch

become: yes

ansible all -a "ls -ltr /tmp/" -i inventory -- validate the inventory file by running ls command.

ansible-playbook -i inventory playbook.yml

Once you execute the above commands file.txt will be added in the directory we can know by using the below command.

ansible all -a "ls -ltr /tmp/" -i inventory

--------------------------------------------------------------------------------------------------------------------------------------------------------------
21/Jan/2022 -- Kubernetes Time Check Pod
--------------------------------------------------------------------------------------------------------------------------------------------------------------

The Nautilus DevOps team want to create a time check pod in a particular Kubernetes namespace and record the logs. This might be initially used only 
for testing purposes, but later can be implemented in an existing cluster. Please find more details below about the task and perform it.

Create a pod called time-check in the datacenter namespace. This pod should run a container called time-check, container should 
use the busybox image with latest tag only and remember to mention tag i.e busybox:latest.

Create a config map called time-config with the data TIME_FREQ=9 in the same namespace.

The time-check container should run the command: while true; do date; sleep $TIME_FREQ;done and should write the result to the 
location /opt/security/time/time-check.log. Remember you will also need to add an environmental variable TIME_FREQ in the container, 
which should pick value from the config map TIME_FREQ key.

Create a volume log-volume and mount the same on /opt/security/time within the container.

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.

kubectl get namespace -- to check the existing namespaces

kubectl create namespace nautilus -- Create namespace nautilus as requested

Create a yaml file and copy the below manifest file 

vi time.yaml -- pod name should be time-check/name-space: nautilus/image: busybox-latest

apiVersion: v1
kind: ConfigMap
metadata:
  name: time-config
  namespace: nautilus
data:
  TIME_FREQ: "11"
---
apiVersion: v1
kind: Pod
metadata:
  name: time-check
  namespace: nautilus
  labels:
    app: time-check
spec:
  volumes:
    - name: log-volume
      emptyDir: {}
  containers:
    - name: time-check
      image: busybox:latest
      volumeMounts:
        - mountPath: /opt/security/time
          name: log-volume
      envFrom:
        - configMapRef:
            name: time-config
      command: ["/bin/sh", "-c"]
      args:
        [
          "while true; do date; sleep $TIME_FREQ;done > /opt/security/time/time-check.log",
        ]


kubectl create -f /tmp/time.yaml --- to execute the manifest file and create pods

kubectl get po -n nautilus -- to check whether the pod is running or not

kubectl exec time-check --namespace=nautilus -- cat /opt/security/time/time-check.log -- check the time-check.log file to see whether 
the timecheck is running with a gap of 11 seconds.

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Kubernetes Time Check Pod 21/Jan/2022
--------------------------------------------------------------------------------------------------------------------------------------------------------------
